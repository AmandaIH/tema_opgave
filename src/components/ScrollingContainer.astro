---
//@ts-nocheck
let scrollingData = { values: [] };

try {
  const response = await fetch(
    "https://frontend-design-theme.netlify.app/api/financialProjections"
  );

  if (response.ok) {
    scrollingData = await response.json();
  } else {
    console.error("Fetch failed with status:", response.status);
  }
} catch (error) {
  console.error("Fetch error:", error);
}

---

<section>
<div class="textBtn">
    <div>
    <h1>Financial Projections</h1>
    <p>Financial projections are essential for planning and monitoring a companyâ€™s performance.<br> They provide insights into potential revenue, expenses, and profitability over specific periods.</p>
    </div>
    <div class="buttons">
    <button id="scroll-left"><svg width="25" height="21" viewBox="0 0 25 21" fill="none" xmlns="http://www.w3.org/2000/svg">
      <path d="M22.6947 10.3839L1.82227 10.3839M1.82227 10.3839L10.3609 18.9222M1.82227 10.3839L10.3609 1.84473" stroke="currentcolor" stroke-width="3.19444" stroke-linecap="round" stroke-linejoin="round"/>
      </svg>
      </button>
    <button id="scroll-right"><svg width="25" height="22" viewBox="0 0 25 22" fill="none" xmlns="http://www.w3.org/2000/svg">
      <path d="M1.68262 10.8491H22.8341M22.8341 10.8491L14.1812 2.19629M22.8341 10.8491L14.1812 19.5021" stroke="currentcolor" stroke-width="3.23715" stroke-linecap="round" stroke-linejoin="round"/>
      </svg></button>
    </div>
</div>
    <ul class="scroll-container">
        {
        scrollingData.values.map((value) => (
        <li>
            <img src={`/icons/${value.icon}.svg`} alt={`${value.title} icon`} style="width:40px; height:40px; margin-bottom:1rem;" />
            <h3>{value.title}</h3>
            <p>{value.description}</p>
        </li>
        ))
        }
    </ul>
    
</section>

<script>
    const scrollContainer = document.querySelector('.scroll-container');
    const leftBtn = document.getElementById('scroll-left');
    const rightBtn = document.getElementById('scroll-right');
  
    leftBtn.addEventListener('click', () => {
      scrollContainer.scrollBy({ left: -300, behavior: 'smooth' });
    });
  
    rightBtn.addEventListener('click', () => {
      scrollContainer.scrollBy({ left: 300, behavior: 'smooth' });
    });
  </script>

<style>
@layer component {
section {
  padding-top: 2rem;
  padding-bottom: 2rem;
  grid-column: full;
  background-color: var(--secondary01);

  display: grid;
  grid-template-columns:
    [full-start] 1fr [content-start] minmax(0, var(--content-width)) [content-end] 1fr [full-end];
}

.textBtn {
    margin-top: 3rem;
    grid-column: content;
    display: grid;
    grid-template-columns: 2fr 1fr;
}

ul {
    grid-column: content;
    display: flex;
    overflow-x: auto;
    list-style: none;

  padding: 1rem; 

  gap: 2rem;
  scroll-behavior: smooth;
}

li:nth-child(2) {
    background-color: var(--primary03);
    color: var(--secondary02);
}

li:nth-child(2) img {
  color: var(--primary01);
}

li {
  flex-basis: min(90%, 400px);
  flex-shrink: 0;
  background: #EBEBEB;
  color: var(--primary03);
  padding: 1rem;
  max-width: 35ch;
  border-radius: 1rem;
}

.scroll-container {
  scrollbar-width: none; 
}
.scroll-container h3 {
  font-family: var(---font-family-header);
  font-size: 1rem;
  padding: 0.5rem;
}
.scroll-container p {
  font-family: var(---font-family-lato);
  font-size: 0.8rem;
  padding: 0.5rem;
}

.scroll-container::-webkit-scrollbar {
  display: none;
}

h1 {
font-family: var(---font-family-header);
font-size: 2.5rem;
}
.textBtn p {
font-family: var(--font-family-lato);
font-size: 0.75rem;
color: #595566;
padding-top: 1.5rem;
}
.buttons {
  align-self: end;   
  justify-self: end;    
  display: flex;
  gap: 0.5rem;
}

#scroll-left {
background-color: var(--primary03);
color: var(--secondary02);
padding: 1rem;
border-radius: 50%;
}
#scroll-right {
background-color: var(--primary01);
padding: 1rem;
border-radius: 50%;
}
}
</style>